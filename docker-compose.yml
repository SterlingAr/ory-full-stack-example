version: '3'

networks:
  ory_stack:
    driver: bridge
  stack:
    external:
#      name: daassuitedockerdevelopment_stack
      name: ${APPLICATION_NETWORK}

volumes:
  hydra_db:
    driver: local
  keto_db:
    driver: local
  rules:
    driver: local

services:
  hydra_postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: hydra-db
    environment:
      - POSTGRES_USER=${HYDRA_POSTGRES_USER}
      - POSTGRES_PASSWORD=${HYDRA_POSTGRES_PASSWORD}
      - POSTGRES_DB=${HYDRA_POSTGRES_DB}
    volumes:
    - ${DATA_PATH_HOST}/hydra_db:/var/lib/postgresql/data
    networks:
      - ory_stack

  keto_postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: keto-db
    environment:
      - POSTGRES_USER=${KETO_POSTGRES_USER}
      - POSTGRES_PASSWORD=${KETO_POSTGRES_PASSWORD}
      - POSTGRES_DB=${KETO_POSTGRES_DB}
    volumes:
      - ${DATA_PATH_HOST}/keto_db:/var/lib/postgresql/data
    networks:
      - ory_stack
    ports:
      - "5432:5432"

  hydra_migrate:
    image: oryd/hydra:${HYDRA_VERSION}
    container_name: hydra-migrate-v1
    depends_on:
      - hydra_postgres
    networks:
    - ory_stack
    volumes:
      - ./hydra-config.yaml:/configuration/hydra-config.yaml
    entrypoint: hydra
    command: "--config /configuration/hydra-config.yaml migrate sql --yes -e"
    tty: false

  keto_migrate:
    image: oryd/keto:${KETO_VERSION}
    container_name: keto-migrate
    depends_on:
      - keto_postgres
    networks:
      - ory_stack
    volumes:
      - ./keto-config.yaml:/configuration/keto-config.yaml
#    command: "migrate sql $KETO_DATABASE_URL"
    entrypoint: keto
    command: "--config /configuration/keto-config.yaml migrate sql --yes -e"
    tty: false

  oathkeeper_api:
    image: oryd/oathkeeper:${OATHKEEPER_VERSION}
    container_name: oathkeeper-api
    environment:
      - HOST_IP=${HOST_IP}
    depends_on:
      - keto
    networks:
      - ory_stack
    volumes:
      - ./oathkeeper-config.yaml:/configuration/oathkeeper-config.yaml
      - ./jwks.json:/tokens/jwks.json
      - ./oathkeeper-rules.json:/resources/oathkeeper-rules.json
    entrypoint: oathkeeper
    ports:
      - "4456:4456"
      - "4455:4455"
    command: "--config /configuration/oathkeeper-config.yaml serve all"

  keto:
    image: oryd/keto:${KETO_VERSION}
    container_name: keto
    depends_on:
      - keto_migrate
    networks:
      - ory_stack
      - stack
    volumes:
      - ./keto-config.yaml:/configuration/keto-config.yaml
    ports:
      - "4466:4466"
    entrypoint: keto
    command: "--config /configuration/keto-config.yaml serve all"
#    command: "serve"

  hydra:
    image: oryd/hydra:${HYDRA_VERSION}
    container_name: hydra
    depends_on:
    - hydra_migrate
#    environment:
#      - DATABASE_URL=${HYDRA_DATABASE_URL}
#      - SYSTEM_SECRET=${SYSTEM_SECRET}
#      - OAUTH2_ISSUER_URL=${OAUTH2_ISSUER_URL}
#      - OAUTH2_CONSENT_URL=${OAUTH2_CONSENT_URL}
#      - OAUTH2_LOGIN_URL=${OAUTH2_LOGIN_URL}
#      - CORS_ENABLED=${CORS_ENABLED}
#      - CORS_DEBUG=${CORS_DEBUG}
#      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
#      - CORS_ALLOWED_METHODS=${CORS_ALLOWED_METHODS}
#      - CORS_ALLOWED_CREDENTIALS=${CORS_ALLOWED_CREDENTIALS}
#      - CORS_ALLOWED_HEADERS=${CORS_ALLOWED_HEADERS}
    volumes:
      - ./hydra-config.yaml:/configuration/hydra-config.yaml
    networks:
      - ory_stack
      - stack
    ports:
      - "9003:4444"
      - "9001:4445"
    entrypoint: hydra
#    command: "serve all --dangerous-force-http"
    command: "--config /configuration/hydra-config.yaml serve all --dangerous-force-http"
